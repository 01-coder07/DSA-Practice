Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

basically we have to find the next permutation.
we can do it by two ways :brute approach, and optimal.
brute approach - 1 > Find all the permutations using recursion.
                 2 > Now match the permutations with the given input.
                 3 > Then Return the next permutation.

Optimal approach :
                1. Iterate from end of array and find the first decreasing elemente.nums[i]<nums[i+1].
                2. Now find the element which is greater than the index i element , swap it and break. 
                3. now reverse the array i.e from index +1 to nums.length.
class Solution {
    public void rev(int []nums,int i,int j){
         while(i<j){
            int temp = nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
         }
    }
    public void nextPermutation(int[] nums) {
        int ind =-1;
        int n = nums.length;
     // step1: FIND THE FIRST DECREASING ELEMENT FROM LAST.
        for(int i=n-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
               ind =i;
               break;           
            }
        }
    // IF NO DECREASING ORDER,MEANS IND==-1,(LAST PERMUTATION) REVERSE WHOLE ARRAY.
        if(ind ==-1){
            rev(nums,0,n-1);
            return;
        }
//STEP 2: FIND THE NEXT GREATER ELEMENT TO SWAP WITH NUMS[IND];
        for(int i=n-1;i>=ind;i--){                                         T.C=0(3n)
           if(nums[i]>nums[ind]){                                           S.c=0(1)
             int temp =nums[i];
             nums[i]=nums[ind];
             nums[ind]=temp;
             break;
           }
        }
//STEP 3: REVERSE THE ELEMENT AFTER THE SWAPPED ELEMENT.
        rev(nums,ind+1,n-1);
    }
}

