//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

//brute approach- COnsist of using three loop to iterate in the array , 
//brute approach
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int n=nums.length;
        for(int i=0;i<n-2;i++){                //  T.c=0(n3) s.c=0(1)
          for(int j=i+1;j<n-1;j++){
            for(int k=j+1;k<n;k++){
            if(nums[i]+nums[j]+nums[k]==0){
                List<Integer> li = Arrays.asList(nums[i],nums[j],nums[k]);
            if(!ans.contains(li)) ans.add(li);
            }
        }
    }
 }
        return ans;
    //better soln:
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length; // T.c=0(n2) S.c=0(n)
        HashSet<List<Integer>> answerSet = new HashSet<>();
        for (int i = 0; i < n - 2; i++) {
            HashSet<Integer> smallAnswer = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                int third = -(nums[i] + nums[j]);
                if (smallAnswer.contains(third)) {
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], third);
                    Collections.sort(temp);
                    answerSet.add(temp);
                }
                smallAnswer.add(nums[j]);
            }
        }
        List<List<Integer>> finalAnswer = new ArrayList<>(answerSet);
        return finalAnswer;
    }
}
//Optimal solution - Using two pointer.
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int j = i + 1;
            int k = nums.length - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--; // T.C=0(nlogn) + 0(n2)
                } // S.c=0(1)
                else {
                    List<Integer> li = Arrays.asList(nums[i], nums[j], nums[k]);
                    ans.add(li);
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1])
                        j++;
                    while (j < k && nums[k] == nums[k + 1])
                        k--;
                }
            }
        }
        return ans;

    }
}


