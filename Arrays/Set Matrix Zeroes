// Given an m x n integer matrix , if an element is 0, set its entire row and column to 0's.
better approach:
// Just  simply make an row array with size m and col array with size n . bydefault it will be zero. now just run loop to check 
// which row or col is zero. make that index of your arrays as  1 . This will be done by our first nested loop.
// after this again use nested loops to set all the value of row or col as 0 at places where row[i] or col[j] =1. 
Code:
class Solution {
    public void setZeroes(int[][] matrix) {
        int m =matrix.length;
        int n = matrix[0].length;
        int row[] = new int[m];
        int col[] = new int[n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(matrix[i][j]==0){                             T.c = 0(2 * (n*m))  S.C=0(mn)
                   row[i]=1;
                   col[j]=1;
               }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(row[i]==1 || col[j]==1){
                    matrix[i][j]=0;
                }
            }
        }
    }
}
//look time complexity cannot be more optimal but that extra space. yes optimal solution has same tc but constant space .























