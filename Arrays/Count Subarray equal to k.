Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

//better would be using loops finding all the subarray then just counting subarray equal to k and return it.
//code : storing the preSum with its count;
//optimal way
class Solution {
    public int subarraySum(int[] nums, int k) {
        int preSum=0;
        int count=0;
        HashMap<Integer,Integer> map = new HashMap<>();
        // add 0 in map.
        map.put(0,1);
        for(int i=0;i<nums.length;i++){                                    T.c=0(n)   s.c=0(n)
            //calculate the sum till i.
          preSum +=nums[i];
          // this is the step for (x-k).
          int remove = preSum -k;
          count += map.getOrDefault(remove,0);
          map.put(preSum,map.getOrDefault(preSum,0)+1);
        }
        return count;
    }
}
